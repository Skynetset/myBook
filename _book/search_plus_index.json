{"./":{"url":"./","title":"Introduction","keywords":"","body":"IntroductionIntroduction Copyright © Skynetcus 2021 all right reserved，powered by Gitbook该文章修订时间： 2022-03-26 09:08:05 window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"gitbook/":{"url":"gitbook/","title":"GitBook","keywords":"","body":"GitBookGitBook Copyright © Skynetcus 2021 all right reserved，powered by Gitbook该文章修订时间： 2022-03-26 09:08:05 window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"gitbook/markdown.html":{"url":"gitbook/markdown.html","title":"Markdown","keywords":"","body":"MarkdownMarkdown标题我展示的是一级标题我展示的是二级标题一级标题二级标题段落字体分隔线脚注列表区块引用代码链接图片表格高级技巧TreeviewCopyright © Skynetcus all right reserved, powered by aleen42 Markdown 标题 1、使用 = 和 - 标记一级和二级标题 我展示的是一级标题 我展示的是二级标题 2、使用 # 号标记 一级标题 二级标题 三级标题 段落 两个以上空格加上回车。 空行。 字体 Markdown 可以使用以下几种字体： 分隔线 三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。 脚注 列表 无序列表 有序列表 列表嵌套 区块引用 格式 区块嵌套 区块中使用列表 列表中使用区块 代码 反引号包起来（`），例如： 代码区块 链接 普通链接使用方法如下： 高级链接 图片 基础语法格式如下： 图片网址使用变量: 使用普通的 img 标签。 表格 语法格式如下： 对齐方式 高级技巧 支持的 HTML 元素 转义 Markdown Markdown 标题 Markdown 标题有两种格式。 1、使用 = 和 - 标记一级和二级标题 = 和 - 标记语法格式如下： 我展示的是一级标题 ================= 我展示的是二级标题 ----------------- 我展示的是一级标题 我展示的是二级标题 2、使用 # 号标记 使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。 # 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 一级标题 二级标题 三级标题 四级标题 五级标题 六级标题 段落 两个以上空格加上回车。 aaa bbb aaabbb 空行。 aaa bbb aaa bbb 字体 Markdown 可以使用以下几种字体： *斜体文本* _斜体文本_ **粗体文本** __粗体文本__ ***粗斜体文本*** ___粗斜体文本___ ~~BAIDU.COM~~ 带下划线文本 斜体文本斜体文本粗体文本粗体文本粗斜体文本粗斜体文本BAIDU.COM带下划线文本 分隔线 三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。 可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线： *** * * * ***** - - - ---------- 脚注 脚注是对文本的补充说明。 [^要注明的文本] 以下实例演示了脚注的用法： 创建脚注格式类似这样 [^脚注]。 以下实例演示了脚注的用法：创建脚注格式类似这样 。 列表 Markdown 支持有序列表和无序列表。 无序列表 使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空格，然后再填写内容： * 第一项 * 第二项 * 第三项 + 第一项 + 第二项 + 第三项 - 第一项 - 第二项 - 第三项 第一项 第二项 第三项 第一项 第二项 第三项 第一项 第二项 第三项 有序列表 使用数字并加上 . 号来表示，如： 1. 第一项 2. 第二项 3. 第三项 第一项 第二项 第三项 列表嵌套 在子列表中的选项前面添加四个空格即可： 1. 第一项： - 第一项嵌套的第一个元素 - 第一项嵌套的第二个元素 2. 第二项： - 第二项嵌套的第一个元素 - 第二项嵌套的第二个元素 第一项： 第一项嵌套的第一个元素 第一项嵌套的第二个元素 第二项： 第二项嵌套的第一个元素 第二项嵌套的第二个元素 区块引用 格式 段落开头使用 > 符号 ，然后后面紧跟一个空格符号： > 区块引用 > 人生若只如初见 > 何事悲风秋画扇 区块引用人生若只如初见何事悲风秋画扇 区块嵌套 区块是可以嵌套的，一个 > 符号是最外层，两个 > 符号是第一层嵌套，以此类推： > 最外层 > > 第一层嵌套 > > > 第二层嵌套 最外层 第一层嵌套 第二层嵌套 区块中使用列表 > 区块中使用列表 > 1. 第一项 > 2. 第二项 > + 第一项 > + 第二项 > + 第三项 区块中使用列表 1. 第一项 2. 第二项 第一项 第二项 第三项 列表中使用区块 如果要在列表项目内放进区块，那么就需要在 > 前添加四个空格的缩进。 * 第一项 > 人生若只如初见 > 何事悲风秋画扇 * 第二项 第一项 人生若只如初见何事悲风秋画扇 第二项 代码 反引号包起来（`），例如： `printf()` 函数 printf() 函数 代码区块 使用 4 个空格或者一个制表符（Tab 键）。aaabbbcccddd aaabbbcccddd 你也可以用 ``` 包裹一段代码，并指定一种语言（也可以不指定）： $(document).ready(function () { alert('RUNOOB'); }); $(document).ready(function () { alert('RUNOOB'); }); 链接 普通链接使用方法如下： [链接名称](链接地址) 或者 这是一个链接 菜鸟教程 https://www.runoob.com 高级链接 我们可以通过变量来设置一个链接，变量赋值在文档末尾进行： 这个链接用 1 作为网址变量 [Google][1] 这个链接用 runoob 作为网址变量 [Runoob][runoob] 然后在文档的结尾为变量赋值（网址） 这个链接用 1 作为网址变量 Google这个链接用 runoob 作为网址变量 Runoob然后在文档的结尾为变量赋值（网址） 图片 基础语法格式如下： ![alt 属性文本](图片地址) ![alt 属性文本](图片地址 \"可选标题\") 开头一个感叹号 !接着一个方括号，里面放上图片的替代文字 接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 'title' 属性的文字。 图片网址使用变量: 这个链接用 1 作为网址变量 [RUNOOB][1]. 然后在文档的结尾为变量赋值（网址） 这个链接用 1 作为网址变量 RUNOOB. 然后在文档的结尾为变量赋值（网址） 使用普通的 img 标签。 表格 使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。 语法格式如下： | 表头 | 表头 | | ---- | ---- | | 单元格 | 单元格 | | 单元格 | 单元格 | 表头 表头 单元格 单元格 单元格 单元格 对齐方式 -: 设置内容和标题栏居右对齐。 :- 设置内容和标题栏居左对齐。 :-: 设置内容和标题栏居中对齐。 | 左对齐 | 右对齐 | 居中对齐 | | :-----| ----: | :----: | | 单元格 | 单元格 | 单元格 | | 单元格 | 单元格 | 单元格 | 左对齐 右对齐 居中对齐 单 元 格 单 元 格 高级技巧 支持的 HTML 元素 不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。 目前支持的 HTML 元素有： 等 ，如： 使用 Ctrl+Alt+Del 重启电脑 使用 Ctrl+Alt+Del 重启电脑 转义 Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符： **文本加粗** \\*\\* 正常显示星号 \\*\\* 文本加粗** 正常显示星号 ** Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号： 反斜线 ` 反引号 * 星号 _ 下划线 {} 花括号 [] 方括号 () 小括号 # 井字号 加号 减号 . 英文句点 ! 感叹号 Copyright © Skynetcus 2021 all right reserved，powered by Gitbook该文章修订时间： 2022-03-26 09:08:05 window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "},"gitbook/plugins.html":{"url":"gitbook/plugins.html","title":"Plugins","keywords":"","body":"GitBook 插件1. Klipse1.1. Clojure & ClojureScript1.2. Javascript1.3. Python1.4. Ruby1.5. Scheme1.6. PHP2. Prism3. Sectionx4. ancre-navigation5. Mermaid-gb36. Sharing-plus7. Search Plus8. Edit Link9. hide-element10. Anchors11. chapter-fold12. expandable-chapters13. code14. insert-logo15. custom-favicon16. pageview-count17. Tbfed-pagefooter18. Advanced Emoji19. KaTex25. Donate26. Musicxml27. auto-scroll-table28. Github29. page-treeview30. lightboxGitHub ButtonsInclude CodeblockSplitterFaviconTodoTerminalCopy-code-buttonAlertsVersions-selectRSStheme-comscoresummaryTreeviewCopyright © Skynetcus all right reserved, powered by aleen42 1. Klipse 1.1. Clojure & ClojureScript 1.1.1. For clojure[script] code evaluation: 1.1.2. For clojurescript code transpilation: 1.2. Javascript 1.3. Python 1.4. Ruby 1.5. Scheme 1.6. PHP 2. Prism 3. Sectionx 4. ancre-navigation 5. Mermaid-gb3 6. Sharing-plus 7. Search Plus 8. Edit Link 9. hide-element 10. Anchors 11. chapter-fold 12. expandable-chapters 13. code 14. insert-logo 15. custom-favicon 16. pageview-count 17. Tbfed-pagefooter 18. Advanced Emoji 19. KaTex 25. Donate 26. Musicxml 27. auto-scroll-table 28. Github 29. page-treeview 30. lightbox GitHub Buttons Include Codeblock Splitter Favicon Todo Terminal Copy-code-button Alerts Versions-select RSS theme-comscore summary GitBook 插件 记录一些实用的插件, 如果要指定插件的版本可以使用 plugin@0.3.1。 下面的插件在 GitBook 的 3.2.3 版本中可以正常工作，因为一些插件可能不会随着 GitBook版本的升级而升级. 即下面的插件可能不适用高版本的 GitBook，所以这里指定了 GitBook 的版本。另外本文记录的插件在 Linux 下都是可以正确工作的。 windows系统没有测试。这里只是列举了一部分插件，如果有其它的需求，可以到 插件官网 区搜索相关插件。 1. Klipse 集成 Klipse (online code evaluator) 插件地址 Klipse { \"plugins\": [ \"klipse\" ] } klipse 目前支持下面的语言： javascript: evaluation is done with the javascript function eval and pretty printing of the result is done with pretty-format clojure[script]: evaluation is done with Self-Hosted Clojurescript ruby: evaluation is done with Opal C++: evaluation is done with JSCPP python: evaluation is done with Skulpt scheme: evaluation is done with BiwasScheme PHP: evaluation is done with Uniter BrainFuck JSX EcmaScript2017 Google Charts: See Interactive Business Report with Google Charts. 示例： 1.1. Clojure & ClojureScript 1.1.1. For clojure[script] code evaluation: (map inc [1 2 3]) (map inc [1 2 3]) 1.1.2. For clojurescript code transpilation: (map inc [1 2 3]) (map inc [1 2 3]) 1.2. Javascript [1,2,3].map(function(x) { return x + 1;}) [1,2,3].map(function(x) { return x + 1;}) 1.3. Python print [x + 1 for x in range(10)] print [x + 1 for x in range(10)] 1.4. Ruby [1,2]*10 [1,2]*10 1.5. Scheme (let ((x 23) (y 42)) (+ x y)) (let ((x 23) (y 42)) (+ x y)) 1.6. PHP $var = [\"a\" => 1]; var_dump($var); $var = [\"a\" => 1]; var_dump($var); 2. Prism 使用 Prism.js 为语法添加高亮显示，需要将 highlight 插件去掉。 该插件自带的主题样式较少，可以再安装 prism-themes 插件，里面多提供了几种样式， 具体的样式可以参考 这里，在设置样式时要注意设置 css 文件名，而不是样式名。 Prism 插件地址 prism-themes 插件地址 { \"plugins\": [ \"prism\", \"-highlight\" ], \"pluginsConfig\": { \"prism\": { \"css\": [ \"prismjs/themes/prism-dark.css\" ] } } } 由于其他插件使用代码块概念来表示其他功能，您可以忽略某些语言 { \"pluginsConfig\": { \"prism\": { \"ignore\": [ \"mermaid\", \"eval-js\" ] } } } 如果需要修改背景色、字体大小等，可以在 website.css 定义 pre[class*=\"language-\"] 类来修改，下面是一个示例： pre[class*=\"language-\"] { border: none; background-color: #f7f7f7; font-size: 1em; line-height: 1.2em; } 3. Sectionx 将页面分块显示，标签的 tag 最好是使用 b 标签，如果使用 h1-h6 可能会和其他插件冲突。 插件地址 一个部分将采用三个参数，如下所示： data-title: 标题，它将显示为引导面板的标题（大小为 h2）。 请注意，标题中不能使用字符 \"，请使用&quot;代替。 data-id: id，它对于按钮控制很有用（在下一节中讨论）。 data-show: 默认情况下表示面板内容是否可见的布尔值。 true: 面板内容默认对用户可见，面板标题可点击。 false: 面板内容默认对用户隐藏，面板标题不可点击，只能通过添加自定义按钮来查看（在下一节中讨论）。 data-nopdf: 一个布尔值，表示该部分是否将隐藏在 pdf 导出中。 true: 该面板不会显示在 .pdf 或 .epub 格式的文件中。 data-collapse: 一个布尔值，表示默认情况下该部分是否将打开（但仍然可见）。 true: 面板内容默认对用户可见，但已关闭。 false: 面板内容默认对用户可见，但已打开（默认设置）。 class: 该按钮必须属于section类。 target: 当按下时，id 为 target 的部分将被切换。 show: 隐藏目标部分时按钮上的文本。 hide: 目标部分可见时按钮上的文本。 { \"plugins\": [ \"sectionx\" ], \"pluginsConfig\": { \"sectionx\": { \"tag\": \"b\" } } } 使用示例 Sectionx Demo Insert markdown content here (you should start with h3 if you use heading). 4. ancre-navigation 页面右上角悬浮导航以及回到顶部按钮 插件地址 { \"plugins\": [ \"ancre-navigation\" ] } 5. Mermaid-gb3 支持渲染Mermaid图表 插件地址 { \"plugins\": [ \"mermaid-gb3\" ] } 使用示例: graph TD; A-->B; A-->C; B-->D; C-->D; 6. Sharing-plus 分享当前页面，比默认的 sharing 插件多了一些分享方式。 插件地址 { \"plugins\": [ \"-sharing\", \"sharing-plus\" ] } 配置: { \"pluginsConfig\": { \"sharing\": { \"douban\": false, \"facebook\": false, \"google\": true, \"hatenaBookmark\": false, \"instapaper\": false, \"line\": true, \"linkedin\": true, \"messenger\": false, \"pocket\": false, \"qq\": false, \"qzone\": true, \"stumbleupon\": false, \"twitter\": false, \"viber\": false, \"vk\": false, \"weibo\": true, \"whatsapp\": false, \"all\": [ \"facebook\", \"google\", \"twitter\", \"weibo\", \"instapaper\", \"linkedin\", \"pocket\", \"stumbleupon\" ] } } } 7. Search Plus 支持中文搜索, 需要将默认的 search 和 lunr 插件去掉。 插件地址 { \"plugins\": [\"-lunr\", \"-search\", \"search-plus\"] } 8. Edit Link 如果将 GitBook 的源文件保存到github或者其他的仓库上，使用该插件可以链接到当前页的源文件上。 插件地址 { \"plugins\": [ \"edit-link\" ], \"pluginsConfig\": { \"edit-link\": { \"base\": \"https://github.com/USER/REPO/edit/BRANCH\", \"label\": \"Edit This Page\" } } } 9. hide-element Hide the element that you don't want to see. 插件地址 { \"plugins\": [ \"hide-element\" ], \"pluginsConfig\": { \"hide-element\": { \"elements\": [\".gitbook-link\"] } } } 10. Anchors 添加 Github 风格的锚点样式 插件地址 { \"plugins\": [ \"anchors\" ] } 11. chapter-fold Extended from the expandable-chapters plugin, and make a little modify. Thx for the original author. Tiny change to the expandable-chapters plugin from https://github.com/DomainDrivenArchitecture/ to use smaller arrows. 插件地址 { \"plugins\": [\"chapter-fold\"] } 12. expandable-chapters 这个插件为每一章添加了一个图标，它有一个子列表和 css 状态，用于子列表折叠展开。 插件地址 { \"plugins\": [\"expandable-chapters\"] } 13. code 代码块很酷，但也可以更酷。这个插件为多行块添加行号和一个复制按钮来轻松复制块的内容。 插件地址 { \"plugins\": [\"code\"], \"pluginsConfig\": { \"code\": { \"copyButtons\": false } } } 14. insert-logo 以下插件将徽标插入导航栏（摘要上方和搜索输入上方）。 只需将 logo.png 文件拖放到 GitBook 的根文件夹中，然后将此插件添加到您的 book.json 中： 插件地址 { \"plugins\": [\"insert-logo\"], \"pluginsConfig\": { \"insert-logo\": { \"url\": \"https://www.example.com/my-logo.png\", \"style\": \"background: none;\" } } } 15. custom-favicon 将您自己的图标添加到 gitbook 主题。 插件删除位于“_book/gitbook/images/favicon.ico”的 gitbook favicon 并替换为您的 favicon。 可能有更好的方法来做到这一点，但这至少适用于大多数用例。然而，这是一个骇入手段&#x1F603; 插件地址 { \"plugins\" : [\"custom-favicon\"], \"pluginsConfig\" : { \"favicon\": \"path/to/favicon.ico\" } } 16. pageview-count 文档页面阅读数插件 插件地址 { \"plugins\": [ \"pageview-count\" ] } 17. Tbfed-pagefooter 为页面添加页脚 插件地址 { \"plugins\": [ \"tbfed-pagefooter\" ], \"pluginsConfig\": { \"tbfed-pagefooter\": { \"copyright\": \"Copyright &copy Skynetcus.com 2021\", \"modify_label\": \"该文件修订时间：\", \"modify_format\": \"YYYY-MM-DD HH:mm:ss\" } } } 18. Advanced Emoji 支持emoji表情 emoij表情列表 插件地址 { \"plugins\": [ \"advanced-emoji\" ] } 使用示例： 使用忽略标志例如，如果您想要不替换表情符号的出现，您需要将它们包装在以下注释中。 :white_check_mark: 您甚至可以在代码块或更多行周围设置忽略。 例如： ''' Check the Code Code ... :white_check_mark: ''' 19. KaTex 为了支持数学公式, 我们可以使用KaTex和MathJax插件, 官网上说Katex速度要快于MathJax 插件地址 MathJax使用LaTeX语法编写数学公式教程 { \"plugins\": [ \"katex\" ] } 使用示例: When a≠0a \\ne 0a≠0, there are two solutions to (ax2+bx+c=0)(ax^2 + bx + c = 0)(ax​2​​+bx+c=0) and they are x=−b±b2−4ac2a.x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.x=​2a​​−b±√​b​2​​−4ac​​​​​. ∫−∞∞g(x)dx\r \\int_{-\\infty}^\\infty g(x) dx\r \r ∫​−∞​∞​​g(x)dx 13\r 1 \\over 3\r \r ​3​​1​​ 25. Donate 打赏插件 插件地址 { \"plugins\": [ \"donate\" ], \"pluginsConfig\": { \"donate\": { \"wechat\": \"https://111.com/resource/weixin.png\", \"alipay\": \"https://111.com/resource/alipay.png\", \"title\": \"给爷\", \"button\": \"赏\", \"alipayText\": \"支付宝打赏\", \"wechatText\": \"微信打赏\" } } } 26. Musicxml 支持 musicxml 格式的乐谱渲染。 插件地址 musicXML { \"plugins\": [\"musicxml\"] } 下面是一个示例，需要注意的是 block 中的内容必须是一个合法的 musicxml 文件路径，并且不能有换行和空格。 效果如下所示 27. auto-scroll-table 表格增加滑动条 插件地址 { \"plugins\": [\"auto-scroll-table\"] } 28. Github 添加github图标 插件地址 { \"plugins\": [ \"github\" ], \"pluginsConfig\": { \"github\": { \"url\": \"https://github.com/Skynetset\" } } } 29. page-treeview 一个用于为每个页面生成“树视图”的 gitbook 插件。 插件地址 { \"plugins\": [ \"page-treeview\" ], \"pluginsConfig\": { \"page-treeview\": { \"copyright\": \"Copyright © Skynetcus\", \"minHeaderCount\": \"2\", \"minHeaderDeep\": \"2\" } } } 30. lightbox 一个通过灯箱显示图像的 gitbook 插件 插件地址 { \"plugins\": [ \"lightbox\" ], \"pluginsConfig\": { \"pluginsConfig\": { \"lightbox\": { \"includeJQuery\": false, \"options\": { \"resizeDuration\": 200, \"sameUuid\": true, \"wrapAround\": true } } } } } GitHub Buttons 添加项目在 GitHub 上的 star，watch，fork情况 插件地址 { \"plugins\": [ \"github-buttons\" ], \"pluginsConfig\": { \"github-buttons\": { \"repo\": \"Skynetcus/gitbook-use\", \"types\": [ \"star\", \"watch\", \"fork\" ], \"size\": \"small\" } } } Include Codeblock 使用代码块的格式显示所包含文件的内容. 该文件必须存在。插件提供了一些配置，可以区插件官网查看。如果同时使用 ace 和本插件，本插件要在 ace 插件前面加载。 插件地址 { \"plugins\": [ \"include-codeblock\" ], \"pluginsConfig\": { \"include-codeblock\": { \"template\": \"ace\", \"unindent\": \"true\", \"theme\": \"monokai\" } } } 使用示例: import Splitter 使侧边栏的宽度可以自由调节 插件地址 { \"plugins\": [ \"splitter\" ] } Favicon 更改网站的 favicon.ico 插件地址 { \"plugins\": [ \"favicon\" ], \"pluginsConfig\": { \"favicon\": { \"shortcut\": \"assets/images/favicon.ico\", \"bookmark\": \"assets/images/favicon.ico\", \"appleTouch\": \"assets/images/apple-touch-icon.png\", \"appleTouchMore\": { \"120x120\": \"assets/images/apple-touch-icon-120x120.png\", \"180x180\": \"assets/images/apple-touch-icon-180x180.png\" } } } } Todo 添加 Todo 功能。默认的 checkbox 会向右偏移 2em，如果不希望偏移，可以在 website.css 里加上下面的代码: input[type=checkbox]{ margin-left: -2em; } 插件地址 { \"plugins\": [ \"todo\" ] } 使用示例： [ ] write some articles [X] drink a cup of tea Terminal 模拟终端显示，主要用于显示命令以及多行输出，不过写起来有些麻烦。 插件地址 { \"plugins\": [ \"terminal\" ], \"pluginsConfig\": { \"terminal\": { \"copyButtons\": true, \"fade\": false, \"style\": \"flat\" } } } 现在支持 6 种标签： command: Command \"executed\" in the terminal. delimiter: Sequence of characters between the prompt and the command. error: Error message. path: Directory path shown in the prompt. prompt: Prompt of the user. warning: Warning message. 标签的使用格式如下所示： **[ 内容] 为了使标签正常工作，需要在代码块的第一行加入 **[termial] 标记，下面是一个完整的示例： **[terminal] **[prompt foo@joe]**[path ~]**[delimiter $ ]**[command ./myscript] Normal output line. Nothing special here... But... You can add some colors. What about a warning message? **[warning [WARNING] The color depends on the theme. Could look normal too] What about an error message? **[error [ERROR] This is not the error you are looking for] 效果如下所示： **[terminal] **[prompt foo@joe]**[path ~]**[delimiter $ ]**[command ./myscript] Normal output line. Nothing special here... But... You can add some colors. What about a warning message? **[warning [WARNING] The color depends on the theme. Could look normal too] What about an error message? **[error [ERROR] This is not the error you are looking for] terminal 支持下面 5 种样式，如果需要更换样式，在 pluginsConfig 里配置即可。 black: Just that good old black terminal everybody loves. classic: Looking for green color font over a black background? This is for you. flat: Oh, flat colors. I love flat colors. Everything looks modern with them. ubuntu: Admit it or not, but Ubuntu have a good looking terminal. white: Make your terminal to blend in with your GitBook. Copy-code-button 为代码块添加复制的按钮。 插件地址 { \"plugins\": [\"copy-code-button\"] } 效果如下图所示： Alerts 添加不同 alerts 样式的 blockquotes，目前包含 info, warning, danger 和 success 四种样式。 插件地址 { \"plugins\": [\"alerts\"] } 下面是使用示例： Info styling > **[info] For info** > > Use this for infomation messages. Warning styling > **[warning] For warning** > > Use this for warning messages. Danger styling > **[danger] For danger** > > Use this for danger messages. Success styling > **[success] For info** > > Use this for success messages. 效果如下所示： Info styling [info] For info Use this for infomation messages. Warning styling [warning] For warning Use this for warning messages. Danger styling [danger] For danger Use this for danger messages. Success styling [success] For info Use this for success messages. Versions-select 添加版本选择的下拉菜单，针对文档有多个版本的情况。 插件地址 { \"plugins\": [ \"versions-select\" ], \"pluginsConfig\": { \"versions\": { \"options\": [ { \"value\": \"http://gitbook.111.com\", \"text\": \"v3.2.2\" }, { \"value\": \"http://gitbook.111.com/v2/\", \"text\": \"v2.6.4\" } ] } } } 我们可以自定义 css 来修改 select 的显示样式： .versions-select select { height: 2em; line-height: 2em; border-radius: 4px; background: #efefef; } 效果见左上角。 RSS 添加 rss 订阅功能。 插件地址 { \"plugins\": [ \"rss\" ], \"pluginsConfig\": { \"rss\": { \"title\": \"GitBook 使用教程\", \"description\": \"记录 GitBook 的配置和一些插件的使用\", \"author\": \"Skynetcus\", \"feed_url\": \"http://gitbook.111.com/rss\", \"site_url\": \"http://gitbook.111.com/\", \"managingEditor\": \"me@111.com\", \"webMaster\": \"me@111.com\", \"categories\": [ \"gitbook\" ] } } } 效果见右上角。 theme-comscore 主题插件, 修改标题和表格颜色。默认标题都是黑色的。 插件地址 { \"plugins\": [ \"theme-comscore\" ] } summary 根据文件自动生成目录。 插件地址 { \"plugins\": [ \"summary\" ] } 规则： 每个新增的目录中加入README.md，否则菜单为不可折叠 同个目录下的文件采用自然排序来决定菜单生成的前后顺序， 故在文件或目录前加入 \"数字-\" 如 \"0-\" 或 \"1-\" 来排序菜单的前后顺序。 菜单由目录自动生成，菜单名称依赖md文件中的标题， 故每个md文件中必须添加标题, 否则无法生成目录。 示例： 我们假设您的源代码树是这样完成的： $ tree . . ├── 1-Getting Started │ ├── 0-README.md │ └── 1-TEST.md ├── 2-Reference │ └── 0-README.md ├── README.md └── SUMMARY.md 生成的SUMMARY.md文件将如下所示： - [Getting Started](1-Getting Started/0-README.md) - [Test](1-Getting Started/1-TEST.md) - [Reference](2-Reference/0-README.md) Copyright © Skynetcus 2021 all right reserved，powered by Gitbook该文章修订时间： 2022-06-24 07:18:28 window.klipse_settings = { selector: \".language-klipse, .lang-eval-clojure\", selector_eval_js: \".lang-eval-js\", selector_eval_python_client: \".lang-eval-python\", selector_eval_php: \".lang-eval-php\", selector_eval_scheme: \".lang-eval-scheme\", selector_eval_ruby: \".lang-eval-ruby\", selector_reagent: \".lang-reagent\", selector_google_charts: \".lang-google-chart\", selector_es2017: \".lang-eval-es2017\", selector_jsx: \".lang-eval-jsx\", selector_transpile_jsx: \".lang-transpile-jsx\", selector_render_jsx: \".lang-render-jsx\", selector_react: \".lang-react\", selector_eval_markdown: \".lang-render-markdown\", selector_eval_lambdaway: \".lang-render-lambdaway\", selector_eval_cpp: \".lang-eval-cpp\", selector_eval_html: \".lang-render-html\", selector_sql: \".lang-eval-sql\", selector_brainfuck: \"lang-eval-brainfuck\", selector_js: \".lang-transpile-cljs\" }; "}}